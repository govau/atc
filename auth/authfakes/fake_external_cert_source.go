// Code generated by counterfeiter. DO NOT EDIT.
package authfakes

import (
	"sync"

	"github.com/concourse/atc/auth"
)

type FakeExternalCertSource struct {
	FetchCurrentCertificatesStub        func() (auth.CertificateMap, error)
	fetchCurrentCertificatesMutex       sync.RWMutex
	fetchCurrentCertificatesArgsForCall []struct{}
	fetchCurrentCertificatesReturns     struct {
		result1 auth.CertificateMap
		result2 error
	}
	fetchCurrentCertificatesReturnsOnCall map[int]struct {
		result1 auth.CertificateMap
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExternalCertSource) FetchCurrentCertificates() (auth.CertificateMap, error) {
	fake.fetchCurrentCertificatesMutex.Lock()
	ret, specificReturn := fake.fetchCurrentCertificatesReturnsOnCall[len(fake.fetchCurrentCertificatesArgsForCall)]
	fake.fetchCurrentCertificatesArgsForCall = append(fake.fetchCurrentCertificatesArgsForCall, struct{}{})
	fake.recordInvocation("FetchCurrentCertificates", []interface{}{})
	fake.fetchCurrentCertificatesMutex.Unlock()
	if fake.FetchCurrentCertificatesStub != nil {
		return fake.FetchCurrentCertificatesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.fetchCurrentCertificatesReturns.result1, fake.fetchCurrentCertificatesReturns.result2
}

func (fake *FakeExternalCertSource) FetchCurrentCertificatesCallCount() int {
	fake.fetchCurrentCertificatesMutex.RLock()
	defer fake.fetchCurrentCertificatesMutex.RUnlock()
	return len(fake.fetchCurrentCertificatesArgsForCall)
}

func (fake *FakeExternalCertSource) FetchCurrentCertificatesReturns(result1 auth.CertificateMap, result2 error) {
	fake.FetchCurrentCertificatesStub = nil
	fake.fetchCurrentCertificatesReturns = struct {
		result1 auth.CertificateMap
		result2 error
	}{result1, result2}
}

func (fake *FakeExternalCertSource) FetchCurrentCertificatesReturnsOnCall(i int, result1 auth.CertificateMap, result2 error) {
	fake.FetchCurrentCertificatesStub = nil
	if fake.fetchCurrentCertificatesReturnsOnCall == nil {
		fake.fetchCurrentCertificatesReturnsOnCall = make(map[int]struct {
			result1 auth.CertificateMap
			result2 error
		})
	}
	fake.fetchCurrentCertificatesReturnsOnCall[i] = struct {
		result1 auth.CertificateMap
		result2 error
	}{result1, result2}
}

func (fake *FakeExternalCertSource) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchCurrentCertificatesMutex.RLock()
	defer fake.fetchCurrentCertificatesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeExternalCertSource) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.ExternalCertSource = new(FakeExternalCertSource)
